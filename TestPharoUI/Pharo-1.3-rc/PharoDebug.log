THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ZnClient class>>get:
20 December 2011 5:57:06 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

ZnClient class(Object)>>doesNotUnderstand: #get:
	Receiver: ZnClient
	Arguments and temporary variables: 
		aMessage: 	get: 'http://localhost:1701'
		exception: 	MessageNotUnderstood: ZnClient class>>get:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 111)
		format: 	146
		instanceVariables: 	#('request' 'response' 'connection' 'lastUsed' 'state' 'opti...etc...
		organization: 	('accessing request' accept: addPart: addPath: addPathSegment: ap...etc...
		subclasses: 	nil
		name: 	#ZnClient
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Client-Server'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(512753664)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ ZnClient get: 'http://localhost:1701'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(651689984)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		requestor: 	a TextMorphForEditView(512753664)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | self afterSelectionInsertAndSelect: result printString]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>printIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	113
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#printIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		return: 	[:val | ^ val]
		asciiValue: 	112
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''h...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		evt: 	[keystroke '<Cmd-p>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


SmalltalkEditor>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		view: 	a PluggableTextMorph(559677440)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-p>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(512753664)
	Receiver's instance variables: 
		timeStamp: 	746646
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	80@32
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	112
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (myDependents -> a DependentsA...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient get: ''http...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(512753664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	191@184 corner: 207@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211812352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@184 191@184 mouseMove CMD 746027 nil]
		targetOffset: 	80@32
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 746027 191 184 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(972029952) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(972029952) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(512753664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	191@184 corner: 207@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211812352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@184 191@184 mouseMove CMD 746027 nil]
		targetOffset: 	80@32
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 746027 191 184 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		focusHolder: 	a TextMorphForEditView(512753664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	191@184 corner: 207@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211812352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@184 191@184 mouseMove CMD 746027 nil]
		targetOffset: 	80@32
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 746027 191 184 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
	Receiver's instance variables: 
		bounds: 	191@184 corner: 207@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211812352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@184 191@184 mouseMove CMD 746027 nil]
		targetOffset: 	80@32
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 746027 191 184 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-p>']
		evt: 	[keystroke '<Cmd-p>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	191@184 corner: 207@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211812352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@184 191@184 mouseMove CMD 746027 nil]
		targetOffset: 	80@32
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 746027 191 184 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-p>']
		evtBuf: 	#(2 746646 112 0 8 112 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	191@184 corner: 207@200
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211812352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[191@184 191@184 mouseMove CMD 746027 nil]
		targetOffset: 	80@32
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 746027 191 184 0 8 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(972029952))(a PreDebu...etc...
		lastStepTime: 	746637
		lastStepMessage: 	nil
		lastCycleTime: 	746678
		alarms: 	a Heap()
		lastAlarmTime: 	746637
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))


--- The full stack ---
ZnClient class(Object)>>doesNotUnderstand: #get:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>printIt
SmalltalkEditor>>printIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
SmalltalkEditor>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MacRubyApp class>>instance
20 December 2011 6:13:42 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

MacRubyApp class(Object)>>doesNotUnderstand: #instance
	Receiver: MacRubyApp
	Arguments and temporary variables: 
		aMessage: 	instance
		exception: 	MessageNotUnderstood: MacRubyApp class>>instance
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#MacRubyApp
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MacRubyApp
		traitComposition: 	nil
		localSelectors: 	nil


MacRubyApp class>>run
	Receiver: MacRubyApp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#MacRubyApp
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MacRubyApp
		traitComposition: 	nil
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(512753664)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ MacRubyApp run
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(429654016)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		requestor: 	a TextMorphForEditView(512753664)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get:...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


SmalltalkEditor>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(559677440)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(512753664)
	Receiver's instance variables: 
		timeStamp: 	1742788
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	553@213
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1743358) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(512753664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1157@407 corner: 1173@423
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(448266240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1157@407 1157@407 mouseMove CMD 1742560 nil]
		targetOffset: 	608@182
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1742560 1157 407 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(135790592) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(135790592) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(512753664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1157@407 corner: 1173@423
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(448266240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1157@407 1157@407 mouseMove CMD 1742560 nil]
		targetOffset: 	608@182
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1742560 1157 407 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(512753664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1157@407 corner: 1173@423
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(448266240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1157@407 1157@407 mouseMove CMD 1742560 nil]
		targetOffset: 	608@182
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1742560 1157 407 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	1157@407 corner: 1173@423
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(448266240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1157@407 1157@407 mouseMove CMD 1742560 nil]
		targetOffset: 	608@182
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1742560 1157 407 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1157@407 corner: 1173@423
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(448266240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1157@407 1157@407 mouseMove CMD 1742560 nil]
		targetOffset: 	608@182
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1742560 1157 407 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 1742788 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1157@407 corner: 1173@423
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(448266240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1157@407 1157@407 mouseMove CMD 1742560 nil]
		targetOffset: 	608@182
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1742560 1157 407 0 8 0 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil



--- The full stack ---
MacRubyApp class(Object)>>doesNotUnderstand: #instance
MacRubyApp class>>run
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
SmalltalkEditor>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MacRubyApp>>run
20 December 2011 6:14:09 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

MacRubyApp(Object)>>doesNotUnderstand: #run
	Receiver: a MacRubyApp
	Arguments and temporary variables: 
		aMessage: 	run
		exception: 	MessageNotUnderstood: MacRubyApp>>run
		resumeValue: 	nil
	Receiver's instance variables: 
a MacRubyApp

MacRubyApp class>>run
	Receiver: MacRubyApp
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#MacRubyApp
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MacRubyApp
		traitComposition: 	nil
		localSelectors: 	nil
		instance: 	a MacRubyApp


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(512753664)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ MacRubyApp run
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(429654016)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		requestor: 	a TextMorphForEditView(512753664)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get:...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		evt: 	[keystroke '<Cmd-d>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	StandardToolSet
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Ocompletion-ECSqueak'
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


SmalltalkEditor>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(512753664)
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		view: 	a PluggableTextMorph(559677440)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-d>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(512753664)
	Receiver's instance variables: 
		timeStamp: 	1742788
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	553@213
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	2


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(512753664)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 905@66
		owner: 	a TransformMorph(612106240)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 905@66
		color: 	Color black
		extension: 	a MorphExtension (592969728) [other:  (blinkStart -> 1769711) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'server := ZnServer startDefaultOn: 1701.
ZnClient new get: ''...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(559677440)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(512753664)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	667@401 corner: 683@417
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(357826560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[667@401 mouseUp 1769137 nil]
		targetOffset: 	46@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1769137 667 401 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(45613056) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(45613056) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(512753664)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	667@401 corner: 683@417
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(357826560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[667@401 mouseUp 1769137 nil]
		targetOffset: 	46@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1769137 667 401 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		focusHolder: 	a TextMorphForEditView(512753664)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	667@401 corner: 683@417
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(357826560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[667@401 mouseUp 1769137 nil]
		targetOffset: 	46@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1769137 667 401 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
	Receiver's instance variables: 
		bounds: 	667@401 corner: 683@417
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(357826560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[667@401 mouseUp 1769137 nil]
		targetOffset: 	46@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1769137 667 401 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-d>']
		evt: 	[keystroke '<Cmd-d>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	667@401 corner: 683@417
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(357826560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[667@401 mouseUp 1769137 nil]
		targetOffset: 	46@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1769137 667 401 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-d>']
		evtBuf: 	#(2 1742788 100 0 8 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	667@401 corner: 683@417
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(357826560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[667@401 mouseUp 1769137 nil]
		targetOffset: 	46@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1769137 667 401 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil



--- The full stack ---
MacRubyApp(Object)>>doesNotUnderstand: #run
MacRubyApp class>>run
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
SmalltalkEditor>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: MacRubyApp>>handleRequest:
20 December 2011 6:14:41 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

MacRubyApp(Object)>>doesNotUnderstand: #handleRequest:
	Receiver: a MacRubyApp
	Arguments and temporary variables: 
		aMessage: 	handleRequest: a ZnRequest(GET /)
		exception: 	MessageNotUnderstood: MacRubyApp>>handleRequest:
		resumeValue: 	nil
	Receiver's instance variables: 
		server: 	a ZnMultiThreadedServer(running 1701)


[self delegate isNil
		ifTrue: [ZnResponse notFound: request uri]
		ifFalse: [self delegate handleRequest: request]] in ZnMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnMultiThreadedServer(running 1701)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /)
	Receiver's instance variables: 
		port: 	1701
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		delegate: 	a MacRubyApp
		authenticator: 	nil
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil


ZnMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
	Receiver: a ZnMultiThreadedServer(running 1701)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /)
		block: 	[self delegate isNil
		ifTrue: [ZnResponse notFound: request uri]
		ifFa...etc...
	Receiver's instance variables: 
		port: 	1701
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		delegate: 	a MacRubyApp
		authenticator: 	nil
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil


ZnMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
	Receiver: a ZnMultiThreadedServer(running 1701)
	Arguments and temporary variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		initialMilliseconds: 	1797940
	Receiver's instance variables: 
		port: 	1701
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		delegate: 	a MacRubyApp
		authenticator: 	nil
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil


ZnMultiThreadedServer>>executeRequestResponseLoopOn:
	Receiver: a ZnMultiThreadedServer(running 1701)
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		request: 	a ZnRequest(GET /)
		response: 	nil
	Receiver's instance variables: 
		port: 	1701
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		delegate: 	a MacRubyApp
		authenticator: 	nil
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil


[self executeRequestResponseLoopOn: stream] in [[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]] in [[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]]
		ifCurtailed: [self log debug: 'Destroying socket'.
			socket destroy]] in ZnMultiThreadedServer>>serveConnectionsOn:
	Receiver: a ZnMultiThreadedServer(running 1701)
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
	Receiver's instance variables: 
		port: 	1701
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		delegate: 	a MacRubyApp
		authenticator: 	nil
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil


BlockClosure>>ensure:
	Receiver: [self executeRequestResponseLoopOn: stream]
	Arguments and temporary variables: 
		aBlock: 	[self log debug: 'Closing stream'.
	self closeSocketStream: stream]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[[self executeRequestResponseLoopOn: stream]
		ensure: [self log ...etc...
		startpc: 	118
		numArgs: 	0


[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]] in [[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]]
		ifCurtailed: [self log debug: 'Destroying socket'.
			socket destroy]] in ZnMultiThreadedServer>>serveConnectionsOn:
	Receiver: a ZnMultiThreadedServer(running 1701)
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
	Receiver's instance variables: 
		port: 	1701
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		delegate: 	a MacRubyApp
		authenticator: 	nil
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil


BlockClosure>>ifCurtailed:
	Receiver: [[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
...etc...
	Arguments and temporary variables: 
		aBlock: 	[self log debug: 'Destroying socket'.
	socket destroy]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	[[[self executeRequestResponseLoopOn: stream]
		ensure: [self log...etc...
		startpc: 	113
		numArgs: 	0


[[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]]
		ifCurtailed: [self log debug: 'Destroying socket'.
			socket destroy]] in ZnMultiThreadedServer>>serveConnectionsOn:
	Receiver: a ZnMultiThreadedServer(running 1701)
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		socket: 	a Socket[connected]
	Receiver's instance variables: 
		port: 	1701
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		serverSocket: 	a Socket[waitingForConnection]
		delegate: 	a MacRubyApp
		authenticator: 	nil
		log: 	a ZnLogSupport
		lastRequest: 	nil
		lastResponse: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'....etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	ZnMultiThreadedServer>>serveConnectionsOn:
		startpc: 	108
		numArgs: 	0



--- The full stack ---
MacRubyApp(Object)>>doesNotUnderstand: #handleRequest:
[self delegate isNil
		ifTrue: [ZnResponse notFound: request uri]
		ifFalse: [self delegate handleRequest: request]] in ZnMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnMultiThreadedServer(ZnSingleThreadedServer)>>authenticateRequest:do:
ZnMultiThreadedServer(ZnSingleThreadedServer)>>handleRequest:
ZnMultiThreadedServer>>executeRequestResponseLoopOn:
[self executeRequestResponseLoopOn: stream] in [[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]] in [[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]]
		ifCurtailed: [self log debug: 'Destroying socket'.
			socket destroy]] in ZnMultiThreadedServer>>serveConnectionsOn:
BlockClosure>>ensure:
[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]] in [[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]]
		ifCurtailed: [self log debug: 'Destroying socket'.
			socket destroy]] in ZnMultiThreadedServer>>serveConnectionsOn:
BlockClosure>>ifCurtailed:
[[[self executeRequestResponseLoopOn: stream]
		ensure: [self log debug: 'Closing stream'.
			self closeSocketStream: stream]]
		ifCurtailed: [self log debug: 'Destroying socket'.
			socket destroy]] in ZnMultiThreadedServer>>serveConnectionsOn:
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
20 December 2011 6:14:41 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

[self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore wait]
		ifFalse: [expired := true]] in DelayWaitTimeout>>wait
	Receiver: a DelayWaitTimeout(30000 msecs; 26648 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	30000
		resumptionTime: 	1827937
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		expired: 	false


BlockClosure>>ensure:
	Receiver: [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore wait]
		ifFalse: [expired := true...etc...
	Arguments and temporary variables: 
		aBlock: 	[self unschedule]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	DelayWaitTimeout>>wait
		startpc: 	41
		numArgs: 	0


DelayWaitTimeout>>wait
	Receiver: a DelayWaitTimeout(30000 msecs; 26641 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	30000
		resumptionTime: 	1827937
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	true
		process: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore ...etc...
		expired: 	false


Semaphore>>waitTimeoutMSecs:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		anInteger: 	30000
		d: 	a DelayWaitTimeout(30000 msecs; 26636 msecs remaining)
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


Socket>>waitForDataFor:ifClosed:ifTimedOut:
	Receiver: a Socket[connected]
	Arguments and temporary variables: 
		timeout: 	30
		closedBlock: 	[ConnectionClosed signal: 'Connection closed while waiting for dat...etc...
		timedOutBlock: 	[ConnectionTimedOut signal: 'Data receive timed out.']
		startTime: 	1797937
		msecsDelta: 	30000
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[237 14 0 81 0 0 0 0 48 161 100 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>waitForDataFor:
	Receiver: a Socket[connected]
	Arguments and temporary variables: 
		timeout: 	30
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[237 14 0 81 0 0 0 0 48 161 100 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>receiveDataSignallingTimeout:into:startingAt:
	Receiver: a Socket[connected]
	Arguments and temporary variables: 
		timeout: 	30
		aStringOrByteArray: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		aNumber: 	1
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[237 14 0 81 0 0 0 0 48 161 100 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


SocketStream>>receiveData
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	0
		socket: 	a Socket[connected]
		inBuffer: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		outBuffer: 	#[71 69 84 32 47 32 72 84 84 80 47 49 46 49 13 10 65 99 99 101 112 1...etc...
		inNextToWrite: 	1
		outNextToWrite: 	1
		lastRead: 	0
		timeout: 	30
		autoFlush: 	false
		bufferSize: 	4096
		binary: 	true
		shouldSignal: 	true


SocketStream>>next
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	0
		socket: 	a Socket[connected]
		inBuffer: 	#[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...etc...
		outBuffer: 	#[71 69 84 32 47 32 72 84 84 80 47 49 46 49 13 10 65 99 99 101 112 1...etc...
		inNextToWrite: 	1
		outNextToWrite: 	1
		lastRead: 	0
		timeout: 	30
		autoFlush: 	false
		bufferSize: 	4096
		binary: 	true
		shouldSignal: 	true


ZnLineReader>>processNext
	Receiver: a ZnLineReader
	Arguments and temporary variables: 
		item: 	nil
	Receiver's instance variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		buffer: 	'                                                                '
		position: 	0
		limit: 	4096


ZnLineReader>>nextLine
	Receiver: a ZnLineReader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		buffer: 	'                                                                '
		position: 	0
		limit: 	4096


ZnStatusLine>>readFrom:
	Receiver: a ZnStatusLine
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		line: 	nil
		lineStream: 	nil
		httpCode: 	nil
	Receiver's instance variables: 
		version: 	nil
		code: 	nil
		reason: 	nil


ZnStatusLine class>>readFrom:
	Receiver: ZnStatusLine
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#code->(ZnStatusLine>>#code "a CompiledMethod(10...etc...
		format: 	136
		instanceVariables: 	#('version' 'code' 'reason')
		organization: 	('accessing' code code: reason reason: version version:)
('initia...etc...
		subclasses: 	nil
		name: 	#ZnStatusLine
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'
		traitComposition: 	{}
		localSelectors: 	nil


ZnResponse>>readHeaderFrom:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
	Receiver's instance variables: 
		headers: 	nil
		entity: 	nil
		statusLine: 	nil


ZnResponse(ZnMessage)>>readFrom:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
	Receiver's instance variables: 
		headers: 	nil
		entity: 	nil
		statusLine: 	nil


ZnResponse class(ZnMessage class)>>readFrom:
	Receiver: ZnResponse
	Arguments and temporary variables: 
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
	Receiver's instance variables: 
		superclass: 	ZnMessage
		methodDict: 	a MethodDictionary(#addCookie:->(ZnResponse>>#addCookie: "a Compile...etc...
		format: 	136
		instanceVariables: 	#('statusLine')
		organization: 	('accessing' addCookie: code cookies location setKeepAliveFor: se...etc...
		subclasses: 	nil
		name: 	#ZnResponse
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'
		traitComposition: 	{}
		localSelectors: 	nil


ZnClient>>executeRequestResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


[self executeRequestResponse] in ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>ensure:
	Receiver: [self executeRequestResponse]
	Arguments and temporary variables: 
		aBlock: 	[self cleanupConnection]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnClient>>getConnectionAndExecute
		startpc: 	132
		numArgs: 	0


ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		redirectCount: 	3
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


[self executeWithRedirectsRemaining: self maxNumberOfRedirects] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


BlockClosure>>on:do:
	Receiver: [self executeWithRedirectsRemaining: self maxNumberOfRedirects]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[:exception | retryCount > 0
		ifTrue: [self handleRetry; execut...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	49
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		retryCount: 	0
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


[self ifFailBlock
		ifNil: [self executeWithRetriesRemaining: self numberOfRetries]
		ifNotNil: [[self executeWithRetriesRemaining: self numberOfRetries]
				on: self exceptionSetForIfFail
				do: self ifFailBlock]] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


[^ block value] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		block: 	[self ifFailBlock
		ifNil: [self executeWithRetriesRemaining: self numbe...etc...
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


[p environmentAt: self put: anObject.
	aBlock value] in ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		anObject: 	30
		aBlock: 	[^ block value]
		p: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore wait]
...etc...
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Support'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	279969792


BlockClosure>>ensure:
	Receiver: [p environmentAt: self put: anObject.
	aBlock value]
	Arguments and temporary variables: 
		aBlock: 	[p environmentAt: self put: oldValue]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout class(DynamicVariable class)>>value:during:
		startpc: 	58
		numArgs: 	0


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		anObject: 	30
		aBlock: 	[^ block value]
		p: 	a Process in [self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore wait]
...etc...
		oldValue: 	nil
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Support'
		traitComposition: 	{}
		localSelectors: 	nil
		hash: 	279969792


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		block: 	[self ifFailBlock
		ifNil: [self executeWithRetriesRemaining: self numbe...etc...
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		initialMilliseconds: 	1797937
		result: 	nil
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


ZnClient>>get:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		url: 	'http://localhost:1701'
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /)
		response: 	nil
		connection: 	SocketStream[inbuf:4kb/outbuf:4kb]
		lastUsed: 	nil
		state: 	#inProgress
		options: 	nil
		session: 	nil
		log: 	a ZnLogSupport


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(512753664)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ ZnClient new get: 'http://localhost:1701'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(267386880)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'server := ZnServer startDefaultOn: 1701.
ZnCli...etc...
		requestor: 	a TextMorphForEditView(512753664)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(512753664)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState



--- The full stack ---
[self schedule.
	beingWaitedOn
		ifTrue: [delaySemaphore wait]
		ifFalse: [expired := true]] in DelayWaitTimeout>>wait
BlockClosure>>ensure:
DelayWaitTimeout>>wait
Semaphore>>waitTimeoutMSecs:
Socket>>waitForDataFor:ifClosed:ifTimedOut:
Socket>>waitForDataFor:
Socket>>receiveDataSignallingTimeout:into:startingAt:
SocketStream>>receiveData
SocketStream>>next
ZnLineReader>>processNext
ZnLineReader>>nextLine
ZnStatusLine>>readFrom:
ZnStatusLine class>>readFrom:
ZnResponse>>readHeaderFrom:
ZnResponse(ZnMessage)>>readFrom:
ZnResponse class(ZnMessage class)>>readFrom:
ZnClient>>executeRequestResponse
[self executeRequestResponse] in ZnClient>>getConnectionAndExecute
BlockClosure>>ensure:
ZnClient>>getConnectionAndExecute
ZnClient>>executeWithRedirectsRemaining:
[self executeWithRedirectsRemaining: self maxNumberOfRedirects] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[self ifFailBlock
		ifNil: [self executeWithRetriesRemaining: self numberOfRetries]
		ifNotNil: [[self executeWithRetriesRemaining: self numberOfRetries]
				on: self exceptionSetForIfFail
				do: self ifFailBlock]] in ZnClient>>executeWithTimeout
[^ block value] in ZnClient>>withTimeoutDo:
[p environmentAt: self put: anObject.
	aBlock value] in ZnConnectionTimeout class(DynamicVariable class)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
ZnClient>>execute
ZnClient>>get
ZnClient>>get:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
SmalltalkEditor>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[519@445 511@450 mouseEnter 7843877 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [519@445 511@450 mouseEnter 7843877 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843877
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	511@450
		handler: 	nil
		wasHandled: 	false
		startPoint: 	519@445
		trail: 	{(511@450)}


MouseMoveEvent>>sentTo:
	Receiver: [519@445 511@450 mouseEnter 7843877 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843877
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	511@450
		handler: 	nil
		wasHandled: 	false
		startPoint: 	519@445
		trail: 	{(511@450)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[519@445 511@450 mouseEnter 7843877 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[519@445 511@450 mouseEnter 7843877 nil]
		originalEvent: 	[519@445 511@450 mouseMove 7843877 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[519@445 511@450 mouseEnter 7843877 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[519@445 511@450 mouseEnter 7843877 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[519@445 511@450 mouseMove 7843877 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[519@445 511@450 mouseEnter 7843877 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[519@445 511@450 mouseMove 7843877 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[519@445 511@450 mouseMove 7843877 nil]
		anEnteredMorph: 	[519@445 511@450 mouseEnter 7843877 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[519@445 511@450 mouseMove 7843877 nil]
		asMouseEnterEvent: 	[519@445 511@450 mouseEnter 7843877 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[519@445 511@450 mouseMove 7843877 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[519@445 511@450 mouseMove 7843877 nil]
		evt: 	[519@445 511@450 mouseMove 7843877 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(142868480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[519@445 511@450 mouseMove 7843877 nil]
		evtBuf: 	#(1 7843877 511 450 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(142868480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(904396800) an OM...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[511@450 502@453 mouseEnter 7843889 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [511@450 502@453 mouseEnter 7843889 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843889
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	502@453
		handler: 	nil
		wasHandled: 	false
		startPoint: 	511@450
		trail: 	{(502@453)}


MouseMoveEvent>>sentTo:
	Receiver: [511@450 502@453 mouseEnter 7843889 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843889
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	502@453
		handler: 	nil
		wasHandled: 	false
		startPoint: 	511@450
		trail: 	{(502@453)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[511@450 502@453 mouseEnter 7843889 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[511@450 502@453 mouseEnter 7843889 nil]
		originalEvent: 	[511@450 502@453 mouseMove 7843889 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[511@450 502@453 mouseEnter 7843889 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[511@450 502@453 mouseEnter 7843889 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[511@450 502@453 mouseMove 7843889 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[511@450 502@453 mouseEnter 7843889 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[511@450 502@453 mouseMove 7843889 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[511@450 502@453 mouseMove 7843889 nil]
		anEnteredMorph: 	[511@450 502@453 mouseEnter 7843889 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[511@450 502@453 mouseMove 7843889 nil]
		asMouseEnterEvent: 	[511@450 502@453 mouseEnter 7843889 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[511@450 502@453 mouseMove 7843889 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[511@450 502@453 mouseMove 7843889 nil]
		evt: 	[511@450 502@453 mouseMove 7843889 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[511@450 502@453 mouseMove 7843889 nil]
		evtBuf: 	#(1 7843889 502 453 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(968884224)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(656670720) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[502@453 474@459 mouseEnter 7843911 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [502@453 474@459 mouseEnter 7843911 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843911
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	474@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	502@453
		trail: 	{(489@456). (474@459)}


MouseMoveEvent>>sentTo:
	Receiver: [502@453 474@459 mouseEnter 7843911 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843911
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	474@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	502@453
		trail: 	{(489@456). (474@459)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[502@453 474@459 mouseEnter 7843911 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[502@453 474@459 mouseEnter 7843911 nil]
		originalEvent: 	[502@453 474@459 mouseMove 7843911 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[502@453 474@459 mouseEnter 7843911 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[502@453 474@459 mouseEnter 7843911 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[502@453 474@459 mouseMove 7843911 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[502@453 474@459 mouseEnter 7843911 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[502@453 474@459 mouseMove 7843911 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[502@453 474@459 mouseMove 7843911 nil]
		anEnteredMorph: 	[502@453 474@459 mouseEnter 7843911 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[502@453 474@459 mouseMove 7843911 nil]
		asMouseEnterEvent: 	[502@453 474@459 mouseEnter 7843911 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[502@453 474@459 mouseMove 7843911 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[502@453 474@459 mouseMove 7843911 nil]
		evt: 	[502@453 474@459 mouseMove 7843911 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(133431296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[502@453 474@459 mouseMove 7843911 nil]
		evtBuf: 	#(1 7843911 489 456 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(133431296)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(839909376) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[474@459 468@459 mouseEnter 7843945 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [474@459 468@459 mouseEnter 7843945 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843945
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	468@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	474@459
		trail: 	{(468@459)}


MouseMoveEvent>>sentTo:
	Receiver: [474@459 468@459 mouseEnter 7843945 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843945
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	468@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	474@459
		trail: 	{(468@459)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[474@459 468@459 mouseEnter 7843945 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[474@459 468@459 mouseEnter 7843945 nil]
		originalEvent: 	[474@459 468@459 mouseMove 7843945 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[474@459 468@459 mouseEnter 7843945 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[474@459 468@459 mouseEnter 7843945 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[474@459 468@459 mouseMove 7843945 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[474@459 468@459 mouseEnter 7843945 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[474@459 468@459 mouseMove 7843945 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[474@459 468@459 mouseMove 7843945 nil]
		anEnteredMorph: 	[474@459 468@459 mouseEnter 7843945 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[474@459 468@459 mouseMove 7843945 nil]
		asMouseEnterEvent: 	[474@459 468@459 mouseEnter 7843945 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[474@459 468@459 mouseMove 7843945 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[474@459 468@459 mouseMove 7843945 nil]
		evt: 	[474@459 468@459 mouseMove 7843945 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(846462976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[474@459 468@459 mouseMove 7843945 nil]
		evtBuf: 	#(1 7843945 468 459 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(846462976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(534249472) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[468@459 455@460 mouseEnter 7843957 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [468@459 455@460 mouseEnter 7843957 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843957
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	455@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	468@459
		trail: 	{(455@460)}


MouseMoveEvent>>sentTo:
	Receiver: [468@459 455@460 mouseEnter 7843957 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843957
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	455@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	468@459
		trail: 	{(455@460)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[468@459 455@460 mouseEnter 7843957 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[468@459 455@460 mouseEnter 7843957 nil]
		originalEvent: 	[468@459 455@460 mouseMove 7843957 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[468@459 455@460 mouseEnter 7843957 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[468@459 455@460 mouseEnter 7843957 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[468@459 455@460 mouseMove 7843957 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[468@459 455@460 mouseEnter 7843957 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[468@459 455@460 mouseMove 7843957 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[468@459 455@460 mouseMove 7843957 nil]
		anEnteredMorph: 	[468@459 455@460 mouseEnter 7843957 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[468@459 455@460 mouseMove 7843957 nil]
		asMouseEnterEvent: 	[468@459 455@460 mouseEnter 7843957 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[468@459 455@460 mouseMove 7843957 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[468@459 455@460 mouseMove 7843957 nil]
		evt: 	[468@459 455@460 mouseMove 7843957 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(483393536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[468@459 455@460 mouseMove 7843957 nil]
		evtBuf: 	#(1 7843957 455 460 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(483393536)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(112197632) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [455@460 431@460 mouseEnter 7843979 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843979
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	431@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	455@460
		trail: 	{(442@460). (431@460)}


MouseMoveEvent>>sentTo:
	Receiver: [455@460 431@460 mouseEnter 7843979 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843979
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	431@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	455@460
		trail: 	{(442@460). (431@460)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
		originalEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[455@460 431@460 mouseEnter 7843979 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[455@460 431@460 mouseEnter 7843979 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		anEnteredMorph: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		asMouseEnterEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		evt: 	[455@460 431@460 mouseMove 7843979 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(590610432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[455@460 431@460 mouseMove 7843979 nil]
		evtBuf: 	#(1 7843979 442 460 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(590610432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(278396928) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [455@460 431@460 mouseEnter 7843979 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843979
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	431@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	455@460
		trail: 	{(442@460). (431@460)}


MouseMoveEvent>>sentTo:
	Receiver: [455@460 431@460 mouseEnter 7843979 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7843979
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	431@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	455@460
		trail: 	{(442@460). (431@460)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
		originalEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[455@460 431@460 mouseEnter 7843979 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[455@460 431@460 mouseEnter 7843979 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		anEnteredMorph: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
		asMouseEnterEvent: 	[455@460 431@460 mouseEnter 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[455@460 431@460 mouseMove 7843979 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(499384320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(187170816) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[431@460 408@460 mouseEnter 7844007 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [431@460 408@460 mouseEnter 7844007 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844007
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	408@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	431@460
		trail: 	{(418@460). (408@460)}


MouseMoveEvent>>sentTo:
	Receiver: [431@460 408@460 mouseEnter 7844007 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844007
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	408@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	431@460
		trail: 	{(418@460). (408@460)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[431@460 408@460 mouseEnter 7844007 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[431@460 408@460 mouseEnter 7844007 nil]
		originalEvent: 	[431@460 408@460 mouseMove 7844007 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[431@460 408@460 mouseEnter 7844007 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[431@460 408@460 mouseEnter 7844007 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[431@460 408@460 mouseMove 7844007 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[431@460 408@460 mouseEnter 7844007 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[431@460 408@460 mouseMove 7844007 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[431@460 408@460 mouseMove 7844007 nil]
		anEnteredMorph: 	[431@460 408@460 mouseEnter 7844007 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[431@460 408@460 mouseMove 7844007 nil]
		asMouseEnterEvent: 	[431@460 408@460 mouseEnter 7844007 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[431@460 408@460 mouseMove 7844007 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[431@460 408@460 mouseMove 7844007 nil]
		evt: 	[431@460 408@460 mouseMove 7844007 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(972292096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[431@460 408@460 mouseMove 7844007 nil]
		evtBuf: 	#(1 7844007 418 460 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(972292096)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(605028352) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[408@460 393@460 mouseEnter 7844048 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [408@460 393@460 mouseEnter 7844048 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844048
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	393@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	408@460
		trail: 	{(393@460)}


MouseMoveEvent>>sentTo:
	Receiver: [408@460 393@460 mouseEnter 7844048 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844048
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	393@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	408@460
		trail: 	{(393@460)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[408@460 393@460 mouseEnter 7844048 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[408@460 393@460 mouseEnter 7844048 nil]
		originalEvent: 	[408@460 393@460 mouseMove 7844048 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[408@460 393@460 mouseEnter 7844048 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[408@460 393@460 mouseEnter 7844048 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[408@460 393@460 mouseMove 7844048 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[408@460 393@460 mouseEnter 7844048 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[408@460 393@460 mouseMove 7844048 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[408@460 393@460 mouseMove 7844048 nil]
		anEnteredMorph: 	[408@460 393@460 mouseEnter 7844048 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[408@460 393@460 mouseMove 7844048 nil]
		asMouseEnterEvent: 	[408@460 393@460 mouseEnter 7844048 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[408@460 393@460 mouseMove 7844048 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[408@460 393@460 mouseMove 7844048 nil]
		evt: 	[408@460 393@460 mouseMove 7844048 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1068498944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[408@460 393@460 mouseMove 7844048 nil]
		evtBuf: 	#(1 7844048 393 460 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1068498944)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(756285440) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:24 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[393@460 389@460 mouseEnter 7844059 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [393@460 389@460 mouseEnter 7844059 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844059
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	389@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	393@460
		trail: 	{(389@460)}


MouseMoveEvent>>sentTo:
	Receiver: [393@460 389@460 mouseEnter 7844059 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844059
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	389@460
		handler: 	nil
		wasHandled: 	false
		startPoint: 	393@460
		trail: 	{(389@460)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[393@460 389@460 mouseEnter 7844059 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[393@460 389@460 mouseEnter 7844059 nil]
		originalEvent: 	[393@460 389@460 mouseMove 7844059 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[393@460 389@460 mouseEnter 7844059 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[393@460 389@460 mouseEnter 7844059 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[393@460 389@460 mouseMove 7844059 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[393@460 389@460 mouseEnter 7844059 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[393@460 389@460 mouseMove 7844059 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[393@460 389@460 mouseMove 7844059 nil]
		anEnteredMorph: 	[393@460 389@460 mouseEnter 7844059 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[393@460 389@460 mouseMove 7844059 nil]
		asMouseEnterEvent: 	[393@460 389@460 mouseEnter 7844059 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[393@460 389@460 mouseMove 7844059 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[393@460 389@460 mouseMove 7844059 nil]
		evt: 	[393@460 389@460 mouseMove 7844059 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(703332352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[393@460 389@460 mouseMove 7844059 nil]
		evtBuf: 	#(1 7844059 389 460 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(703332352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(391118848) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [389@460 376@459 mouseEnter 7844081 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844081
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	376@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	389@460
		trail: 	{(381@460). (376@459)}


MouseMoveEvent>>sentTo:
	Receiver: [389@460 376@459 mouseEnter 7844081 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844081
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	376@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	389@460
		trail: 	{(381@460). (376@459)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
		originalEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[389@460 376@459 mouseEnter 7844081 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[389@460 376@459 mouseEnter 7844081 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		anEnteredMorph: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		asMouseEnterEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		evt: 	[389@460 376@459 mouseMove 7844081 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(778829824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[389@460 376@459 mouseMove 7844081 nil]
		evtBuf: 	#(1 7844081 381 460 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(778829824)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(466616320) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [389@460 376@459 mouseEnter 7844081 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844081
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	376@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	389@460
		trail: 	{(381@460). (376@459)}


MouseMoveEvent>>sentTo:
	Receiver: [389@460 376@459 mouseEnter 7844081 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844081
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	376@459
		handler: 	nil
		wasHandled: 	false
		startPoint: 	389@460
		trail: 	{(381@460). (376@459)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
		originalEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[389@460 376@459 mouseEnter 7844081 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[389@460 376@459 mouseEnter 7844081 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		anEnteredMorph: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
		asMouseEnterEvent: 	[389@460 376@459 mouseEnter 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[389@460 376@459 mouseMove 7844081 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1031536640)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(719323136) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[376@459 368@458 mouseEnter 7844108 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [376@459 368@458 mouseEnter 7844108 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844108
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	368@458
		handler: 	nil
		wasHandled: 	false
		startPoint: 	376@459
		trail: 	{(372@458). (368@458)}


MouseMoveEvent>>sentTo:
	Receiver: [376@459 368@458 mouseEnter 7844108 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844108
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	368@458
		handler: 	nil
		wasHandled: 	false
		startPoint: 	376@459
		trail: 	{(372@458). (368@458)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[376@459 368@458 mouseEnter 7844108 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[376@459 368@458 mouseEnter 7844108 nil]
		originalEvent: 	[376@459 368@458 mouseMove 7844108 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[376@459 368@458 mouseEnter 7844108 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[376@459 368@458 mouseEnter 7844108 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[376@459 368@458 mouseMove 7844108 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[376@459 368@458 mouseEnter 7844108 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[376@459 368@458 mouseMove 7844108 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[376@459 368@458 mouseMove 7844108 nil]
		anEnteredMorph: 	[376@459 368@458 mouseEnter 7844108 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[376@459 368@458 mouseMove 7844108 nil]
		asMouseEnterEvent: 	[376@459 368@458 mouseEnter 7844108 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[376@459 368@458 mouseMove 7844108 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[376@459 368@458 mouseMove 7844108 nil]
		evt: 	[376@459 368@458 mouseMove 7844108 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(785121280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[376@459 368@458 mouseMove 7844108 nil]
		evtBuf: 	#(1 7844108 372 458 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(785121280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(472907776) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[368@458 362@457 mouseEnter 7844149 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [368@458 362@457 mouseEnter 7844149 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844149
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	362@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	368@458
		trail: 	{(362@457)}


MouseMoveEvent>>sentTo:
	Receiver: [368@458 362@457 mouseEnter 7844149 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844149
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	362@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	368@458
		trail: 	{(362@457)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[368@458 362@457 mouseEnter 7844149 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[368@458 362@457 mouseEnter 7844149 nil]
		originalEvent: 	[368@458 362@457 mouseMove 7844149 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[368@458 362@457 mouseEnter 7844149 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[368@458 362@457 mouseEnter 7844149 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[368@458 362@457 mouseMove 7844149 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[368@458 362@457 mouseEnter 7844149 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[368@458 362@457 mouseMove 7844149 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[368@458 362@457 mouseMove 7844149 nil]
		anEnteredMorph: 	[368@458 362@457 mouseEnter 7844149 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[368@458 362@457 mouseMove 7844149 nil]
		asMouseEnterEvent: 	[368@458 362@457 mouseEnter 7844149 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[368@458 362@457 mouseMove 7844149 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[368@458 362@457 mouseMove 7844149 nil]
		evt: 	[368@458 362@457 mouseMove 7844149 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(701497344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[368@458 362@457 mouseMove 7844149 nil]
		evtBuf: 	#(1 7844149 362 457 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(701497344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(214433792) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[362@457 352@457 mouseEnter 7844161 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [362@457 352@457 mouseEnter 7844161 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844161
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	352@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	362@457
		trail: 	{(357@457). (352@457)}


MouseMoveEvent>>sentTo:
	Receiver: [362@457 352@457 mouseEnter 7844161 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844161
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	352@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	362@457
		trail: 	{(357@457). (352@457)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[362@457 352@457 mouseEnter 7844161 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[362@457 352@457 mouseEnter 7844161 nil]
		originalEvent: 	[362@457 352@457 mouseMove 7844161 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[362@457 352@457 mouseEnter 7844161 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[362@457 352@457 mouseEnter 7844161 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[362@457 352@457 mouseMove 7844161 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[362@457 352@457 mouseEnter 7844161 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[362@457 352@457 mouseMove 7844161 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[362@457 352@457 mouseMove 7844161 nil]
		anEnteredMorph: 	[362@457 352@457 mouseEnter 7844161 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[362@457 352@457 mouseMove 7844161 nil]
		asMouseEnterEvent: 	[362@457 352@457 mouseEnter 7844161 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[362@457 352@457 mouseMove 7844161 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[362@457 352@457 mouseMove 7844161 nil]
		evt: 	[362@457 352@457 mouseMove 7844161 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(295960576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[362@457 352@457 mouseMove 7844161 nil]
		evtBuf: 	#(1 7844161 357 457 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(295960576)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1057488896) a Pr...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[352@457 346@457 mouseEnter 7844190 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [352@457 346@457 mouseEnter 7844190 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844190
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	346@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	352@457
		trail: 	{(346@457)}


MouseMoveEvent>>sentTo:
	Receiver: [352@457 346@457 mouseEnter 7844190 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844190
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	346@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	352@457
		trail: 	{(346@457)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[352@457 346@457 mouseEnter 7844190 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[352@457 346@457 mouseEnter 7844190 nil]
		originalEvent: 	[352@457 346@457 mouseMove 7844190 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[352@457 346@457 mouseEnter 7844190 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[352@457 346@457 mouseEnter 7844190 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[352@457 346@457 mouseMove 7844190 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[352@457 346@457 mouseEnter 7844190 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[352@457 346@457 mouseMove 7844190 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[352@457 346@457 mouseMove 7844190 nil]
		anEnteredMorph: 	[352@457 346@457 mouseEnter 7844190 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[352@457 346@457 mouseMove 7844190 nil]
		asMouseEnterEvent: 	[352@457 346@457 mouseEnter 7844190 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[352@457 346@457 mouseMove 7844190 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[352@457 346@457 mouseMove 7844190 nil]
		evt: 	[352@457 346@457 mouseMove 7844190 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777256960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[352@457 346@457 mouseMove 7844190 nil]
		evtBuf: 	#(1 7844190 346 457 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777256960)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(465043456) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[346@457 343@457 mouseEnter 7844206 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [346@457 343@457 mouseEnter 7844206 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844206
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	343@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	346@457
		trail: 	{(343@457)}


MouseMoveEvent>>sentTo:
	Receiver: [346@457 343@457 mouseEnter 7844206 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844206
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	343@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	346@457
		trail: 	{(343@457)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[346@457 343@457 mouseEnter 7844206 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[346@457 343@457 mouseEnter 7844206 nil]
		originalEvent: 	[346@457 343@457 mouseMove 7844206 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[346@457 343@457 mouseEnter 7844206 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[346@457 343@457 mouseEnter 7844206 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[346@457 343@457 mouseMove 7844206 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[346@457 343@457 mouseEnter 7844206 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[346@457 343@457 mouseMove 7844206 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[346@457 343@457 mouseMove 7844206 nil]
		anEnteredMorph: 	[346@457 343@457 mouseEnter 7844206 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[346@457 343@457 mouseMove 7844206 nil]
		asMouseEnterEvent: 	[346@457 343@457 mouseEnter 7844206 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[346@457 343@457 mouseMove 7844206 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[346@457 343@457 mouseMove 7844206 nil]
		evt: 	[346@457 343@457 mouseMove 7844206 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(265551872)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[346@457 343@457 mouseMove 7844206 nil]
		evtBuf: 	#(1 7844206 343 457 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(265551872)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(938213376) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[343@457 339@457 mouseEnter 7844229 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [343@457 339@457 mouseEnter 7844229 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844229
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	339@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	343@457
		trail: 	{(339@457)}


MouseMoveEvent>>sentTo:
	Receiver: [343@457 339@457 mouseEnter 7844229 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844229
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	339@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	343@457
		trail: 	{(339@457)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[343@457 339@457 mouseEnter 7844229 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[343@457 339@457 mouseEnter 7844229 nil]
		originalEvent: 	[343@457 339@457 mouseMove 7844229 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[343@457 339@457 mouseEnter 7844229 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[343@457 339@457 mouseEnter 7844229 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[343@457 339@457 mouseMove 7844229 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[343@457 339@457 mouseEnter 7844229 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[343@457 339@457 mouseMove 7844229 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[343@457 339@457 mouseMove 7844229 nil]
		anEnteredMorph: 	[343@457 339@457 mouseEnter 7844229 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[343@457 339@457 mouseMove 7844229 nil]
		asMouseEnterEvent: 	[343@457 339@457 mouseEnter 7844229 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[343@457 339@457 mouseMove 7844229 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[343@457 339@457 mouseMove 7844229 nil]
		evt: 	[343@457 339@457 mouseMove 7844229 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(452984832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[343@457 339@457 mouseMove 7844229 nil]
		evtBuf: 	#(1 7844229 339 457 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(452984832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(85721088) a PreD...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "morph" is nil
20 December 2011 7:55:25 pm

VM: Mac OS - intel - 1072 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.139] CogVM VM 4.0.0
Image: Pharo1.3 [Latest update: #13320]

UndefinedObject(Object)>>doesNotUnderstand: #morph
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	morph
		exception: 	MessageNotUnderstood: receiver of "morph" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

OMenuMorph(ECMenuMorph)>>handleMouseEnter:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[339@457 332@457 mouseEnter 7844240 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [339@457 332@457 mouseEnter 7844240 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844240
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	332@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	339@457
		trail: 	{(332@457)}


MouseMoveEvent>>sentTo:
	Receiver: [339@457 332@457 mouseEnter 7844240 nil]
	Arguments and temporary variables: 
		anObject: 	an OMenuMorph(668991488)
	Receiver's instance variables: 
		timeStamp: 	7844240
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	332@457
		handler: 	nil
		wasHandled: 	false
		startPoint: 	339@457
		trail: 	{(332@457)}


OMenuMorph(Morph)>>handleEvent:
	Receiver: an OMenuMorph(668991488)
	Arguments and temporary variables: 
		anEvent: 	[339@457 332@457 mouseEnter 7844240 nil]
	Receiver's instance variables: 
		bounds: 	322@450 corner: 522@482
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	322@450 corner: 522@482
		color: 	(TranslucentColor r: 0.9 g: 0.9 b: 0.9 alpha: 0.8)
		extension: 	a MorphExtension (684982272) [eventHandler = an EventHandler; mouseD...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		selected: 	1
		firstVisible: 	1
		titleStringMorph: 	nil
		controller: 	an OController
		context: 	an OContext
		pageHeight: 	4
		itemHeight: 	16
		detailMorph: 	nil
		detailPosition: 	522@450
		lastActivity: 	7840303


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[339@457 332@457 mouseEnter 7844240 nil]
		originalEvent: 	[339@457 332@457 mouseMove 7844240 nil]
		aMorph: 	an OMenuMorph(668991488)
		transformedEvent: 	[339@457 332@457 mouseEnter 7844240 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[339@457 332@457 mouseEnter 7844240 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[339@457 332@457 mouseMove 7844240 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[self
		transform: evt
		from: anEvent
		andSendTo: aLeft...etc...
		falseAlternativeBlock: 	[]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[339@457 332@457 mouseEnter 7844240 nil]
		aLeftMorph: 	an OMenuMorph(668991488)
		anEvent: 	[339@457 332@457 mouseMove 7844240 nil]
		aBlock: 	[]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	an OMenuMorph(668991488)
		asMouseEnterEvent: 	[339@457 332@457 mouseMove 7844240 nil]
		anEnteredMorph: 	[339@457 332@457 mouseEnter 7844240 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(an OMenuMorph(668991488))
	Arguments and temporary variables: 
		aBlock: 	[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorp...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an OMenuMorph(668991488))

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[339@457 332@457 mouseMove 7844240 nil]
		asMouseEnterEvent: 	[339@457 332@457 mouseEnter 7844240 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[339@457 332@457 mouseMove 7844240 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an OBPluggableTextMorph(899153920) an OBGroupingMorph...etc...
		enteredMorphs: 	a WriteStream #()
		overMorphs: 	a WriteStream #()
		leftMorphs: 	an OrderedCollection()


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[339@457 332@457 mouseMove 7844240 nil]
		evt: 	[339@457 332@457 mouseMove 7844240 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946339840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[339@457 332@457 mouseMove 7844240 nil]
		evtBuf: 	#(1 7844240 332 457 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	321@454 corner: 337@470
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946339840)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[332@457 321@454 mouseMove 7844263 nil]
		targetOffset: 	62@97
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 7844263 326 454 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1680@914
		canvas: 	a FormCanvas on: DisplayScreen(1680x914x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(568328192))(a DropList...etc...
		lastStepTime: 	7843866
		lastStepMessage: 	nil
		lastCycleTime: 	7844279
		alarms: 	a Heap()
		lastAlarmTime: 	7843866
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1680@914
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(634126336) a Pre...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(3169320...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #morph
OMenuMorph(ECMenuMorph)>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
OMenuMorph(Morph)>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[self
		transform: evt
		from: anEvent
		andSendTo: aLeftMorph] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[:anEnteredMorph | self
		inform: asMouseEnterEvent
		to: anEnteredMorph
		originatedFrom: anEvent
		ifNotFocusedDo: []] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

